/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ContentAnalyzerDto } from '../models/ContentAnalyzerDto';

import type { CancelablePromise } from '../core/CancelablePromise';
import type { BaseHttpRequest } from '../core/BaseHttpRequest';

export class ContentAnalyzerOperationsService {

    constructor(public readonly httpRequest: BaseHttpRequest) {}

    /**
     * Return content-analyzer definition
     * returns the content-analyzer definition of the content-analyzer with the specified uuid
     * @param tenantId 
     * @param id 
     * @returns ContentAnalyzerDto Returns requested content-analyzer definition
     * @throws ApiError
     */
    public getContentAnalyzerById(
tenantId: string,
id: string,
): CancelablePromise<ContentAnalyzerDto> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/content-analyzer/{tenantId}/{id}',
            path: {
                'tenantId': tenantId,
                'id': id,
            },
            errors: {
                400: `Bad request`,
                404: `Not found`,
            },
        });
    }

    /**
     * Update content-analyzer definition
     * updates the content-analyzer defintion of the content-analyzer with the specified uuid
     * @param tenantId 
     * @param id 
     * @param requestBody 
     * @returns ContentAnalyzerDto Returns updated content-analyzer definition
     * @throws ApiError
     */
    public updateContentAnalyzer(
tenantId: string,
id: string,
requestBody: ContentAnalyzerDto,
): CancelablePromise<ContentAnalyzerDto> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/v1/content-analyzer/{tenantId}/{id}',
            path: {
                'tenantId': tenantId,
                'id': id,
            },
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Bad request`,
                404: `Not found`,
                409: `Conflict`,
            },
        });
    }

    /**
     * Delete content-analyzer definition
     * deletes the content-analyzer defintion of the content-analyzer with the specified uuid
     * @param tenantId 
     * @param id 
     * @returns ContentAnalyzerDto Returns deleted content-analyzer definition
     * @throws ApiError
     */
    public deleteContentAnalyzer(
tenantId: string,
id: string,
): CancelablePromise<ContentAnalyzerDto> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v1/content-analyzer/{tenantId}/{id}',
            path: {
                'tenantId': tenantId,
                'id': id,
            },
            errors: {
                400: `Bad request`,
                404: `Not found`,
                409: `Conflict`,
            },
        });
    }

    /**
     * Return list of content-analyzer definitions
     * returns list of content-analyzer definitions for specific tenant, implements paging
     * @param tenantId 
     * @param limit specifys the max amount of results per page
     * @param page specifys the page, starts at page 1
     * @returns ContentAnalyzerDto Returns content-analyzer list
     * @throws ApiError
     */
    public getContentAnalyzerListForTenantId(
tenantId: string,
limit: number,
page: number,
): CancelablePromise<Array<ContentAnalyzerDto>> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/content-analyzer/{tenantId}',
            path: {
                'tenantId': tenantId,
            },
            query: {
                'limit': limit,
                'page': page,
            },
            errors: {
                400: `Bad request`,
            },
        });
    }

    /**
     * Create content-analyzer definition
     * Create content-analyzer with the specified definition with an autogenerated uuid
     * @param tenantId 
     * @param requestBody 
     * @returns ContentAnalyzerDto Returns created content-analyzer definition
     * @throws ApiError
     */
    public createContentAnalyzer(
tenantId: string,
requestBody: ContentAnalyzerDto,
): CancelablePromise<ContentAnalyzerDto> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/content-analyzer/{tenantId}',
            path: {
                'tenantId': tenantId,
            },
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                409: `Conflict`,
            },
        });
    }

    /**
     * Return content-analyzer definition
     * returns the content-analyzer definition of the content-analyzer with the specified name for specific tenant
     * @param tenantId 
     * @param name 
     * @returns ContentAnalyzerDto Returns requested content-analyzer definition
     * @throws ApiError
     */
    public getContentAnalyzerByNameForTenantId(
tenantId: string,
name: string,
): CancelablePromise<ContentAnalyzerDto> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/content-analyzer/{tenantId}/name/{name}',
            path: {
                'tenantId': tenantId,
                'name': name,
            },
            errors: {
                400: `Bad request`,
                404: `Not found`,
            },
        });
    }

}
